rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to carousel images
    match /carouselImages/{imageId} {
      allow read: if true;  // Publicly readable
      allow write: if request.auth != null && 
                   request.auth.token.isAdmin == true; // Only admins can write
    }

    // Categories collection rules
    match /categories/{categoryId} {
      allow read: if true; // Publicly readable
      allow create, update: if request.auth != null && 
                            request.auth.token.isAdmin == true; // Admin only
      allow delete: if false; // No deletion for safety
    }

    // Users collection rules
    match /users/{userId} {
      // Allow creation only during signup when the ID matches the auth user
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.email == request.auth.token.email;
      
      // Allow users to read and update their own document
      allow read, update: if request.auth != null && 
                          request.auth.uid == userId;
      
      // Allow admins to read any user document
      allow read: if request.auth != null && 
                  request.auth.token.isAdmin == true;
      
      // No public deletion of user accounts
      allow delete: if false;

      // Cart subcollection rules
      match /cart/{itemId} {
        allow create, read, update, delete: if request.auth != null &&
                                            request.auth.uid == userId;
      }
      
      // Saved items subcollection
      match /saved/{itemId} {
        allow create, read, update, delete: if request.auth != null &&
                                            request.auth.uid == userId;
      }
      
      // Orders subcollection
      match /orders/{orderId} {
        allow create: if request.auth != null &&
                     request.auth.uid == userId;
        allow read: if request.auth != null &&
                    (request.auth.uid == userId || 
                     resource.data.sellerId == request.auth.uid);
        allow update: if request.auth != null &&
                      request.auth.token.isAdmin == true;
        allow delete: if false;
      }
    }

    // Products collection rules (NO ADMIN APPROVAL NEEDED)
    match /products/{productId} {
      // Public read access
      allow read: if true;
      
      // Sellers can create their own products
      allow create: if request.auth != null &&
                   request.resource.data.sellerId == request.auth.uid;
      
      // Sellers can update their own products
      allow update: if request.auth != null &&
                   resource.data.sellerId == request.auth.uid;
      
      // Admin can update any product
      allow update: if request.auth != null &&
                   request.auth.token.isAdmin == true;
      
      // Sellers can delete their own products
      allow delete: if request.auth != null &&
                   resource.data.sellerId == request.auth.uid;
      
      // Admin can delete any product
      allow delete: if request.auth != null &&
                   request.auth.token.isAdmin == true;
    }

    // Orders collection rules
    match /orders/{orderId} {
      // Users can create orders
      allow create: if request.auth != null;
      
      // Users can read their own orders
      // Sellers can read orders containing their products
      // Admins can read all orders
      allow read: if request.auth != null &&
                  (request.auth.uid == resource.data.userId ||
                   resource.data.sellerIds.hasAny([request.auth.uid]) ||
                   request.auth.token.isAdmin == true);
      
      // Only admins can update orders (for status changes)
      allow update: if request.auth != null &&
                    request.auth.token.isAdmin == true;
      
      // No deletion
      allow delete: if false;
    }

    // Public content
    match /public/{document=**} {
      allow read: if true;
      allow write: if request.auth != null && 
                   request.auth.token.isAdmin == true;
    }

    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}