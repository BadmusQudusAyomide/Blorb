rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to carousel images
    match /carouselImages/{imageId} {
      allow read: if true;  // Publicly readable
      allow write: if request.auth != null && 
                   request.auth.token.isAdmin == true; // Only admins can write
    }

    // Carousel collection rules
    match /carousel/{itemId} {
      allow read: if true;  // Publicly readable
      allow write: if request.auth != null && 
                   (request.auth.token.isAdmin == true || // Admins can write
                    exists(/databases/$(database)/documents/sellers/$(request.auth.uid))); // Sellers can write
    }

    // Categories collection rules (UPDATED FOR SUBCATEGORIES)
    match /categories/{categoryId} {
      allow read: if true; // Publicly readable
      
      // Allow creation by admins or sellers (for seller-specific categories)
      allow create: if request.auth != null && 
                   (request.auth.token.isAdmin == true || 
                    (request.resource.data.keys().hasAny(['sellerId']) && 
                     request.resource.data.sellerId == request.auth.uid) ||
                    (!request.resource.data.keys().hasAny(['sellerId']) && 
                     exists(/databases/$(database)/documents/sellers/$(request.auth.uid))));
      
      // Allow update by admins or sellers (for seller-specific categories) or for adding subcategories
      allow update: if request.auth != null && 
                   (request.auth.token.isAdmin == true || 
                    (resource.data.keys().hasAny(['sellerId']) && 
                     resource.data.sellerId == request.auth.uid) ||
                    (!resource.data.keys().hasAny(['sellerId']) && 
                     exists(/databases/$(database)/documents/sellers/$(request.auth.uid)) &&
                     // Allow adding subcategories to system categories
                     (request.resource.data.keys().hasAny(['subcategories']) || 
                      request.resource.data.keys().hasAny(['updatedAt']))));
      
      allow delete: if false; // No deletion for safety
    }

    // Users collection rules
    match /users/{userId} {
      // Allow creation only during signup when the ID matches the auth user
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.email == request.auth.token.email;
      
      // Allow users to read and update their own document
      allow read, update: if request.auth != null && 
                          request.auth.uid == userId;
      
      // Allow admins to read any user document
      allow read: if request.auth != null && 
                  request.auth.token.isAdmin == true;
      
      // No public deletion of user accounts
      allow delete: if false;

      // Cart subcollection rules
      match /cart/{itemId} {
        allow create, read, update, delete: if request.auth != null &&
                                            request.auth.uid == userId;
      }
      
      // Saved items subcollection
      match /saved/{itemId} {
        allow create, read, update, delete: if request.auth != null &&
                                            request.auth.uid == userId;
      }
      
      // Orders subcollection
      match /orders/{orderId} {
        allow create: if request.auth != null &&
                     request.auth.uid == userId;
        allow read: if request.auth != null &&
                    (request.auth.uid == userId || 
                     resource.data.sellerId == request.auth.uid);
        allow update: if request.auth != null &&
                      request.auth.token.isAdmin == true;
        allow delete: if false;
      }
    }

    // Products collection rules (NO ADMIN APPROVAL NEEDED)
    match /products/{productId} {
      // Public read access
      allow read: if true;
      
      // Sellers can create their own products
      allow create: if request.auth != null &&
                   request.resource.data.sellerId == request.auth.uid;
      
      // Sellers can update their own products
      allow update: if request.auth != null &&
                   resource.data.sellerId == request.auth.uid;
      
      // Admin can update any product
      allow update: if request.auth != null &&
                   request.auth.token.isAdmin == true;
      
      // Sellers can delete their own products
      allow delete: if request.auth != null &&
                   resource.data.sellerId == request.auth.uid;
      
      // Admin can delete any product
      allow delete: if request.auth != null &&
                   request.auth.token.isAdmin == true;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.isAdmin == true;
    }
    
    function isSeller() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/sellers/$(request.auth.uid));
    }
    
    function isOrderSeller(orderData) {
      return isAuthenticated() && 
             (orderData.sellerIds.hasAny([request.auth.uid]) || 
              orderData.items.hasAny([{'sellerId': request.auth.uid}]));
    }

    // Sellers collection rules
    match /sellers/{sellerId} {
      // Allow public read access to seller profiles
      allow read: if true;
      
      // Allow sellers to write their own profile
      allow write: if request.auth != null && 
                   request.auth.uid == sellerId;
      
      // Allow admins to write any seller profile
      allow write: if request.auth != null && 
                   request.auth.token.isAdmin == true;
    }

    // Orders collection rules
    match /orders/{orderId} {
      // Allow read if user is authenticated and is either a seller or buyer
      allow read: if isAuthenticated() && (
        // Check if user is in sellerIds array
        (resource.data.sellerIds != null && 
         resource.data.sellerIds.hasAny([request.auth.uid])) ||
        // Or if user is the buyer
        resource.data.buyerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
      
      // Allow creation for authenticated users
      allow create: if isAuthenticated() && 
        // Ensure sellerIds array is included
        request.resource.data.sellerIds is list &&
        // Ensure buyerId matches the authenticated user
        request.resource.data.buyerId == request.auth.uid;
      
      // Allow update if user is authenticated and is either a seller, buyer, or admin
      allow update: if isAuthenticated() && (
        // Check if user is in sellerIds array
        (resource.data.sellerIds != null && 
         resource.data.sellerIds.hasAny([request.auth.uid])) ||
        // Or if user is the buyer
        resource.data.buyerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
    }

    // Add this helper function
    function isSellerForOrder(orderData) {
      return orderData.sellerIds != null && 
             orderData.sellerIds.hasAny([request.auth.uid]);
    }

    // Public content
    match /public/{document=**} {
      allow read: if true;
      allow write: if request.auth != null && 
                   request.auth.token.isAdmin == true;
    }

    // Transactions collection rules
    match /transactions/{transactionId} {
      // Allow read if user is authenticated and is either a seller or admin
      allow read: if isAuthenticated() && (
        // Check if user is the seller
        resource.data.sellerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
      
      // Allow creation for authenticated users
      allow create: if isAuthenticated() && 
        // Ensure sellerId matches the authenticated user
        request.resource.data.sellerId == request.auth.uid;
      
      // Allow update if user is authenticated and is either a seller or admin
      allow update: if isAuthenticated() && (
        // Check if user is the seller
        resource.data.sellerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
    }

    // Payouts collection rules
    match /payouts/{payoutId} {
      // Allow read if user is authenticated and is either a seller or admin
      allow read: if isAuthenticated() && (
        // Check if user is the seller
        resource.data.sellerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
      
      // Allow creation for authenticated users
      allow create: if isAuthenticated() && 
        // Ensure sellerId matches the authenticated user
        request.resource.data.sellerId == request.auth.uid;
      
      // Allow update if user is authenticated and is either a seller or admin
      allow update: if isAuthenticated() && (
        // Check if user is the seller
        resource.data.sellerId == request.auth.uid ||
        // Or if user is an admin
        isAdmin()
      );
    }

    // Bank Accounts collection rules
    match /bankAccounts/{accountId} {
      // Allow read if user is authenticated and is the owner of the account
      allow read: if isAuthenticated() && 
                   resource.data.sellerId == request.auth.uid;
      
      // Allow creation for authenticated users
      allow create: if isAuthenticated() && 
        // Ensure sellerId matches the authenticated user
        request.resource.data.sellerId == request.auth.uid;
      
      // Allow update if user is authenticated and is the owner of the account
      allow update: if isAuthenticated() && 
                   resource.data.sellerId == request.auth.uid;
      
      // Allow delete if user is authenticated and is the owner of the account
      allow delete: if isAuthenticated() && 
                   resource.data.sellerId == request.auth.uid;
    }

    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}